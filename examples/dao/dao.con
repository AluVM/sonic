{--
A smart contract written for SONIC runtime environment
SONIC stands for "State machine with ownership notation for indeterministic contracts"
--}

data PartyId: U64
data Party: name String,
            identity String

data VoteId: U64
data Vote: contra | pro
data Voting: title String,
             text Text

data CastVote: voteId VoteId, partyId PartyId, vote Vote

lock Signer: [U8 ^ 32]
    verify: preimage [U8 ^ 32]
        sha256 preimage =?= $ !! invalidPreimage

@issuer(indsc.org)
contract DAO
    var parties: { @verifiable PartyId -> @associated Party }
    var votings: { @verifiable VoteId -> @associated Voting }
    var votes: { @verifiable CastVote }
    
    var signers: { Signer -> PartyId }

    calc votingCount: () -> U64
        count $.votings
    
    calc totalVotes: vote_id VoteId -> U64
        count($.votes |> (key, voting) -> key =?= vote_id)

    calc proVotes: vote_id VoteId -> U64
        count($.votes |> (key, voting) -> key =?= vote_id \/ voting =?= pro)

    calc conterVotes: vote_id VoteId -> U64
        count($.votes |> (key, voting) -> key =?= vote_id \/ voting =?= counter)

    op setup: () -> parties, signers

    op proposal: () -> @new @oneOf votings

    op castVote: with @oneOf signers -> @setUnique(votes[with]) vote Vote, next @oneOf signers
